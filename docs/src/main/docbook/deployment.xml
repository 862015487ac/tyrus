<?xml version="1.0"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2013 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    http://glassfish.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->
<!DOCTYPE chapter [<!ENTITY % ents SYSTEM "tyrus.ent" > %ents; ]>
<chapter xmlns="http://docbook.org/ns/docbook"
         version="5.0"
         xml:lang="en"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd
                             http://www.w3.org/1999/xlink http://www.w3.org/1999/xlink.xsd"
         xml:id="deployment">
    <title>Deploying WebSocket Endpoints</title>
    <para>
        Deploying WebSocket endpoints can be done in two ways. Either deploying via putting the endpoint in the WAR
    file, or using the ServerContainer methods to deploy the programmatic endpoint in the deployment phase.
    </para>

    <section>
        <title>Deploying Endpoints as a WAR file</title>
        <para>
            The classes that are scanned for in WAR are the following ones:
            <itemizedlist mark='opencircle'>
                <listitem>
                    <para>
                        Classes that implement the <code>javax.websocket.ServerApplicationConfig</code>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Classes annotated with <code>javax.websocket.server.ServerEndpoint</code>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Classes that extend <code>javax.websocket.Endpoint</code>.
                    </para>
                </listitem>
            </itemizedlist>
        </para>


        <section>
            <title>Deployment Algorithm</title>
            <para>
                <orderedlist numeration="arabic">
                    <listitem>
                        If one or more classes implementing ServerApplicationConfiguration are present in the WAR file, Tyrus deploys endpoints
                        provided by all of these classes. Tyrus doesn't deploy any other classes present in the WAR (annotated by
                        <code>javax.websocket.server.ServerEndpoint</code> or extending <code>javax.websocket.Endpoint</code>).
                    </listitem>
                    <listitem>
                        If no class implementing ServerApplicationConfiguration is present, Tyrus deploys all classes annotated
                        with @ServerEndpoint or extending Endpoint present in the WAR.
                    </listitem>
                </orderedlist>
            </para>
        </section>

        <para>
            Let's have the following classes in the WAR:
            <example xml:id="deployment-serverapplicationconfig">
                <title>Deployment of WAR containing several classes extending <code>javax.websocket.server.ServerApplicationConfig</code></title>
<programlisting language="java" linenumbering="numbered">public class MyApplicationConfigOne implements ServerApplicationConfig {
    public Set&lt;ServerEndpointConfig&gt; getEndpointConfigs(Set&lt;Class&lt;? extends Endpoint&gt;&gt; endpointClasses);
        Set&lt;Class&lt;? extends Endpoint&gt;&gt; s = new HashSet&lt;Class&lt;? extends Endpoint&gt;&gt;;
        s.add(ProgrammaticEndpointOne.class);
        return s;
    }

    public Set&lt;Class&gt; getAnnotatedEndpointClasses(Set&lt;Class&lt;?&gt;&gt; scanned);
       Set&lt;Class&lt;?&gt;&gt; s = new HashSet&lt;Class&lt;?&gt;&gt;;
        s.add(AnnotatedEndpointOne.class);
        return s;
    }
}

public class MyApplicationConfigTwo implements ServerApplicationConfig {
    public Set&lt;ServerEndpointConfig&gt; getEndpointConfigs(Set&lt;Class&lt;? extends Endpoint&gt;&gt; endpointClasses);
        Set&lt;Class&lt;? extends Endpoint&gt;&gt; s = new HashSet&lt;Class&lt;? extends Endpoint&gt;&gt;;
        s.add(ProgrammaticEndpointTwo.class);
    return s;
}

public Set&lt;Class&gt; getAnnotatedEndpointClasses(Set&lt;Class&lt;?&gt;&gt; scanned);
    Set&lt;Class&lt;?&gt;&gt; s = new HashSet&lt;Class&lt;?&gt;&gt;;
        s.add(AnnotatedEndpointTwo.class);
        return s;
    }
}

@ServerEndpoint(value = "/annotatedone")
public class AnnotatedEndpointOne {
    ...
}

@ServerEndpoint(value = "/annotatedtwo")
    public class AnnotatedEndpointTwo {
    ...
}

@ServerEndpoint(value = "/annotatedthree")
public class AnnotatedEndpointThree {
    ...
}

public class ProgrammaticEndpointOne extends Endpoint {
    ...
}

public class ProgrammaticEndpointTwo extends Endpoint {
    ...
}

public class ProgrammaticEndpointThree extends Endpoint {
    ...
}</programlisting>
            </example>
            According to the deployment algorithm classes <code>AnnotatedEndpointOne</code>, <code>AnnotatedEndpointTwo</code>,
            <code>ProgrammaticEndpointOne</code> and <code>ProgrammaticEndpointTwo</code> will be deployed.
            <code>AnnotatedEndpointThree</code> and <code>ProgrammaticEndpointThree</code> will not be
            deployed, as these are not returned by the respective
            methods of <code>MyApplicationConfigOne</code> nor <code>MyApplicationConfigTwo</code>.
        </para>

    </section>

    <section>
        <title>Deploying endpoints via <code>javax.websocket.server.ServerContainer</code></title>
        <para>
            Endpoints may be deployed using <code>javax.websocket.server.ServerContainer</code> during the application initialization phase.
            For websocket enabled web containers, developers may obtain a reference to the ServerContainer instance by
            retrieving it as an attribute named <code>javax.websocket.server.ServerContainer</code> on the ServletContext, see
            the following example for annotated endpoint:
            <example xml:id="deployment-servercontainer">
                <title>Deployment of Annotated Endpoint Using ServerContainer</title>
<programlisting language="java" linenumbering="numbered">@WebListener
@ServerEndpoint("/annotated")
public class MyServletContextListenerAnnotated implements ServletContextListener {

    @Override
    public void contextInitialized(ServletContextEvent servletContextEvent) {
        final ServerContainer serverContainer = (ServerContainer) servletContextEvent.getServletContext()
                                                    .getAttribute("javax.websocket.server.ServerContainer");

        try {
            serverContainer.addEndpoint(MyServletContextListenerAnnotated.class);
        } catch (DeploymentException e) {
            e.printStackTrace();
        }
    }

    @OnMessage
    public String onMessage(String message) {
        return message;
    }

    @Override
    public void contextDestroyed(ServletContextEvent servletContextEvent) {
    }
}</programlisting>
            </example>
        </para>
    </section>
</chapter>
